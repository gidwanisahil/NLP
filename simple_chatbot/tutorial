

## **Tutorial: Building a Simple Chatbot with Python and NLTK**

### **Prerequisites**

1. **GitHub Account**: You’ll need a GitHub account to create and access Codespaces.
2. **Basic Knowledge of Python**: Familiarity with Python programming is helpful but not mandatory.

### **Step 1: Set Up Your GitHub Codespace**

1. **Create a New Repository**:
   - Go to GitHub and create a new repository.
   - Name it something like `chatbot-project`.
   - Choose to initialize it with a README if you want.

2. **Open a Codespace**:
   - Click on the green `Code` button in your repository and select `Open with Codespaces` > `New codespace`.

### **Step 2: Create the Project Structure**

1. **Open the Terminal**:
   - In your Codespace, open the terminal by clicking on `Terminal` in the top menu and selecting `New Terminal`.

2. **Create a New Directory** (optional):
   ```bash
   mkdir chatbot_project
   cd chatbot_project
   ```

3. **Create a Python File**:
   - Create a new Python file named `chatbot.py`:
   ```bash
   touch chatbot.py
   ```

### **Step 3: Install Required Libraries**

1. **Install the NLTK Library**:
   - In the terminal, run the following command to install the NLTK library:
   ```bash
   pip install nltk
   ```

### **Step 4: Write the Chatbot Code**

1. **Open `chatbot.py`** in the Codespace editor.
2. **Copy and Paste the Following Code**:

   ```python
   import nltk
   from nltk.chat.util import Chat, reflections

   # Define pairs of input and responses
   pairs = [
       [
           r"my name is (.*)",
           ["Hello %1, how can I help you today?",]
       ],
       [
           r"hi|hello|hey",
           ["Hello! How can I assist you?",]
       ],
       [
           r"what is your name?",
           ["I am a chatbot created to help you.",]
       ],
       [
           r"how are you?",
           ["I'm just a program, but thanks for asking!",]
       ],
       [
           r"sorry (.*)",
           ["No problem! How can I assist you?",]
       ],
       [
           r"quit",
           ["Bye! Take care.",]
       ],
       [
           r"(.*)",
           ["I'm sorry, I don't understand that. Can you rephrase?",]
       ]
   ]

   def chatbot():
       print("Hi! I'm a chatbot. Type 'quit' to exit.")
       chat = Chat(pairs, reflections)
       chat.converse()

   if __name__ == "__main__":
       chatbot()
   ```

### **Step 5: Download NLTK Resources**

You may need to download additional resources that NLTK uses.

1. **Open a Python Shell**:
   - In the terminal, run:
   ```bash
   python
   ```

2. **Download NLTK Data**:
   - Run the following commands:
   ```python
   import nltk
   nltk.download('punkt')
   nltk.download('wordnet')
   ```
   - Exit the Python shell by typing:
   ```python
   exit()
   ```

### **Step 6: Run Your Chatbot**

1. **Run the `chatbot.py` Script**:
   - In the terminal, execute the following command:
   ```bash
   python chatbot.py
   ```

### **Step 7: Interact with the Chatbot**

Once you run the script, you can start chatting with your bot! Here are some example inputs you can try:

- **Greeting**: Type `hello`, `hi`, or `hey`.
- **Introduce Yourself**: Type `my name is Sahil`.
- **Ask About the Bot**: Type `what is your name?` or `how are you?`.
- **Exit the Chat**: Type `quit` to stop the conversation.

### **Understanding the Code**

- **Imports**: The code imports `nltk` and the `Chat` class from `nltk.chat.util` to create a simple rule-based chatbot.
- **Pairs**: A list of input-response pairs where the bot matches user input with predefined responses using regular expressions.
- **Reflections**: This dictionary contains input-output pairs that allow the chatbot to substitute pronouns (e.g., “I” to “you”).
- **Chat Function**: The `chatbot()` function initiates the conversation by creating a `Chat` object and calling its `converse()` method.

### **Expanding the Chatbot**

You can enhance your chatbot by:

1. **Adding More Responses**: Add more input-response pairs in the `pairs` list to handle a wider range of questions.
2. **Integrating Machine Learning**: Use libraries like `ChatterBot` for a more sophisticated chatbot that learns from conversations.
3. **Web Integration**: Consider creating a web interface using Flask or Django to make your chatbot accessible online.

### **Conclusion**

Congratulations! You've successfully built a simple chatbot using Python and NLTK. This project serves as a solid foundation for exploring more complex natural language processing tasks and creating advanced conversational agents. If you have any questions or need further assistance, feel free to ask!